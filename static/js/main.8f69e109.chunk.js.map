{"version":3,"sources":["components/ConnectionActionsComponent.tsx","components/FriendComponent.tsx","components/FriendList.tsx","components/MessageComponent.tsx","components/MessageListComponent.tsx","models/Message.ts","models/User.ts","services/XmppService.tsx","components/FormUserSubscription.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ConnectionActionsComponent","ButtonGroup","Button","variant","onClick","props","setOnline","setOffline","Component","xml","require","FriendComponent","Card","setSelectedUser","friend","bg","this","selectedUser","Body","Title","jid","Text","presence","friendShipStatus","removeFriendRequest","App","xmppService","xmpp","send","type","id","xmlns","subscription","FriendList","friendList","map","index","key","MessageComponent","Alert","message","isEmitterRecepterIdentical","$id","emitter","content","MessageListComponent","messages","Message","recepter","User","client","XmppService","username","password","resource","_xmpp","service","domain","messageText","dest","to","generateRandomId","initConnection","undefined","start","catch","console","error","Math","random","toString","substr","FormUserSubscription","state","friendName","Form","FormControl","placeholder","onChange","event","setState","target","value","InputGroup","Append","subscribeRequest","connectionStatus","userId","statusText","subRequests","xmppUsername","xmppPassword","bind","getContactList","handleChangeStatus","Container","Row","className","Col","xs","xmppConnect","element","onSubmit","length","sendMessage","preventDefault","Control","user","on","err","stanza","is","log","attrs","children","name","newFriendlist","subscriptionStatus","ask","from","presenceEvent","filter","newMessages","body","push","address","connect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f69e109.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Button, ButtonGroup } from 'react-bootstrap'\r\n\r\nexport default class ConnectionActionsComponent extends Component <any, any> {\r\n    render() {\r\n        return (\r\n            <ButtonGroup>\r\n                <Button variant=\"success\" onClick={() => this.props.setOnline()}>go online</Button>\r\n                <Button variant=\"warning\" onClick={() => this.props.setOffline()}>go offline</Button>\r\n            </ButtonGroup>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Card, Button } from 'react-bootstrap'\r\nimport { IoMdTrash } from \"react-icons/io\";\r\nimport App from '../App';\r\nimport User from '../models/User';\r\n\r\nconst { xml } = require('@xmpp/client')\r\n\r\nexport default class FriendComponent extends Component<any>{\r\n\r\n    render() {\r\n        return (\r\n            <Card onClick={() => this.props.setSelectedUser(this.props.friend)} bg={this.props.selectedUser === this.props.friend ? \"primary\" : \"secondary\"}>\r\n                <Card.Body>\r\n                    <Card.Title>{this.props.friend.jid}</Card.Title>\r\n                    <Card.Text>{this.props.friend.presence}</Card.Text>\r\n                    <Card.Text>{this.props.friend.friendShipStatus}</Card.Text>\r\n                    <Button variant=\"danger\" onClick={() => this.removeFriendRequest(this.props.friend)}><IoMdTrash /> Remove friend</Button>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    async removeFriendRequest(friend: User) {\r\n        await App.xmppService.xmpp.send(\r\n            xml('iq', {\r\n                type: 'set',\r\n                id: 'roster_4'\r\n            },\r\n                xml('query', { xmlns: 'jabber:iq:roster' },\r\n                    xml(\r\n                        'item', { jid: friend.jid, subscription: 'remove' }\r\n                    )\r\n                )\r\n            )\r\n        )\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react'\r\nimport User from '../models/User'\r\nimport FriendComponent from './FriendComponent'\r\n\r\nexport default class FriendList extends Component<any, any> {\r\n    render() {\r\n        return (\r\n            this.props.friendList.map((friend: User, index: number) => {\r\n                return (\r\n                    <FriendComponent key={index} friend={friend} setSelectedUser={this.props.setSelectedUser} selectedUser={this.props.selectedUser}/>\r\n                )\r\n            })\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Alert } from 'react-bootstrap'\r\n\r\nexport default class MessageComponent extends Component <any,any> {\r\n    render() {\r\n        return (\r\n            <Alert variant={this.props.message.isEmitterRecepterIdentical() ? \"info\" : \"secondary\"} key={this.props.message.$id}>\r\n                <p>From : {this.props.message.isEmitterRecepterIdentical() ? 'Me' : this.props.message.emitter}</p>\r\n                <p>Message : {this.props.message.content}</p>\r\n            </Alert>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport MessageComponent from './MessageComponent'\r\nimport Message from '../models/Message'\r\n\r\nexport default class MessageListComponent extends Component <any>{\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.messages.map((message: Message) => {\r\n                    return <MessageComponent key={message.$id} message={message} />\r\n                })}\r\n            </>\r\n        )\r\n    }\r\n}\r\n","export default class Message {\r\n    private id: string;\r\n    private content: string;\r\n    private emitter: string;\r\n    private recepter: string;\r\n\r\n    constructor(id: string,  content: string, emitter: string, recepter: string) {\r\n        this.id = id;\r\n        this.content = content;\r\n        this.emitter = emitter;\r\n        this.recepter = recepter;\r\n    }\r\n\r\n\r\n    /**\r\n     * Getter $id\r\n     * @return {string}\r\n     */\r\n\tpublic get $id(): string {\r\n\t\treturn this.id;\r\n    }\r\n    \r\n    public isEmitterRecepterIdentical(): boolean {\r\n        return this.emitter === this.recepter;\r\n    }\r\n}","export default class User {\r\n    jid: string;\r\n    presence: string;\r\n    friendShipStatus: string;\r\n\r\n    constructor(jid: string, presence: string, friendShipStatus : string) {\r\n        this.jid = jid;\r\n        this.presence = presence;\r\n        this.friendShipStatus = friendShipStatus;\r\n\t}\r\n}","import User from \"../models/User\";\n\nconst {client, xml} = require('@xmpp/client');\n//const debug = require('@xmpp/debug');\n\nexport class XmppService {\n    get xmpp(): any {\n        return this._xmpp;\n    }\n\n    private _xmpp: any;\n    private username: string;\n    private password: string;\n    private resource: string;\n\n    constructor(username: string, password: string, resource: string) {\n        this.username = username + '@scw-happy-shirley';\n        this.password = password;\n        this.resource = resource;\n    }\n\n    initConnection() {\n        if (this._xmpp == null) {\n            this._xmpp = client({\n                service: 'ws://212.47.241.113:5280/ws',\n                domain: 'scw-happy-shirley',\n                resource: this.resource,\n                username: this.username,\n                password: this.password,\n            });\n        }\n    }\n\n    async sendMessage(messageText: string, dest: User) {\n        // Sends a chat message to itself\n        const message = xml('message', {\n            type: 'chat',\n            to: dest.jid,\n            id: XmppService.generateRandomId()\n        }, xml('body', {}, messageText));\n        await this.xmpp.send(message)\n    }\n\n    public connect() {\n        this.initConnection();\n        if (this._xmpp !== null) {\n            if (this._xmpp !== undefined) {\n                //debug(this.xmpp, true)\n                this._xmpp.start().catch(console.error)\n            }\n        }\n    }\n\n    static generateRandomId(): string {\n        return Math.random().toString(36).substr(2, 9);\n    }\n}\n","import React, { Component } from 'react'\r\nimport { Button, Form, FormControl, InputGroup } from 'react-bootstrap'\r\n\r\nexport default class FormUserSubscription extends Component<any, any> {\r\n    state = {\r\n        friendName: null,\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form>\r\n                    <FormControl placeholder=\"Enter a friend name\" onChange={(event: any) => {\r\n                        this.setState({ friendName: event.target.value })\r\n                    }} />\r\n                    <InputGroup.Append>\r\n                        <InputGroup.Text>@scw-happy-shirley</InputGroup.Text>\r\n                    </InputGroup.Append>\r\n                    <Button variant=\"info\" onClick={() => this.state.friendName ? this.props.subscribeRequest(this.state.friendName + '@scw-happy-shirley') : null}>Ask as friend</Button>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport { Button, Col, Container, Form, FormControl, InputGroup, Row } from 'react-bootstrap';\nimport ConnectionActionsComponent from './components/ConnectionActionsComponent';\nimport FriendList from './components/FriendList';\nimport MessageListComponent from './components/MessageListComponent';\nimport Message from './models/Message';\nimport User from './models/User';\nimport { XmppService } from \"./services/XmppService\";\nimport FormUserSubscription from './components/FormUserSubscription';\n\nconst { xml } = require('@xmpp/client')\n\n\nexport default class App extends Component {\n    static xmppService: XmppService;\n\n    state = {\n        connectionStatus: '',\n        presence: [],\n        userId: '',\n        statusText: '',\n        messages: [],\n        subRequests: [],\n        xmppUsername: '',\n        xmppPassword: '',\n        friendList: [],\n        selectedUser: new User('', '', ''),\n    }\n\n\n    constructor(props: any) {\n        super(props);\n        this.setOnline = this.setOnline.bind(this);\n        this.setOffline = this.setOffline.bind(this);\n        this.getContactList = this.getContactList.bind(this);\n        this.handleChangeStatus = this.handleChangeStatus.bind(this);\n        this.subscribeRequest = this.subscribeRequest.bind(this);\n        this.setSelectedUser = this.setSelectedUser.bind(this);\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row className=\"my-2\">\n                    <Col>\n                        <Form>\n                            <Row>\n                                <Col xs=\"5\">\n                                    <InputGroup>\n                                        <FormControl value={this.state.xmppUsername} onChange={(event: any) => {\n                                            this.setState({ xmppUsername: event.target.value })\n                                        }} />\n                                        <InputGroup.Append>\n                                            <InputGroup.Text>@scw-happy-shirley</InputGroup.Text>\n                                        </InputGroup.Append>\n                                    </InputGroup>\n                                </Col>\n                                <Col xs=\"5\">\n                                    <InputGroup>\n                                        <FormControl type=\"password\" value={this.state.xmppPassword} onChange={(event: any) => {\n                                            this.setState({ xmppPassword: event.target.value })\n                                        }} />\n                                    </InputGroup>\n                                </Col>\n                                <Col xs=\"2\">\n                                    <Button variant=\"secondary\" onClick={() => {\n                                        this.xmppConnect();\n                                    }}>Connect to server</Button>\n                                </Col>\n                            </Row>\n                        </Form>\n                    </Col>\n                </Row>\n                <Row className=\"my-2\">\n                    <Col>\n                        <p>Status : {this.state.connectionStatus}</p>\n                        <p>My user id : {this.state.userId}</p>\n                        <p>Available for : {this.state.presence.map((element) => {\n                            return element;\n                        })}</p>\n                    </Col>\n                    <Col>\n                        <div>\n                            <ConnectionActionsComponent setOnline={this.setOnline} setOffline={this.setOffline} />\n                            <FormUserSubscription subscribeRequest={this.subscribeRequest} />\n                        </div>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <div>\n                            <h1>Messages</h1>\n                            <MessageListComponent messages={this.state.messages} />\n                        </div>\n                        <div className=\"m-2 {this.state.selectedUser !== null ? 'visible': 'invisible'}\">\n                            <Form onSubmit={(event: any) => {\n                                if(this.state.selectedUser.jid.length > 0) {\n                                    App.xmppService.sendMessage(this.state.statusText, this.state.selectedUser);\n                                }\n                                event.preventDefault();\n                            }}>\n                                <Form.Control onChange={this.handleChangeStatus} />\n                                <Button type=\"submit\">Send message</Button>\n                            </Form>\n                        </div>\n                    </Col>\n                    <Col>\n                        <FriendList setSelectedUser={this.setSelectedUser} friendList={this.state.friendList} selectedUser={this.state.selectedUser} />\n                    </Col>\n                </Row>\n            </Container >\n        )\n    }\n\n    handleChangeStatus(event: any) {\n        this.setState({ statusText: event.target.value });\n    }\n\n    async setOnline() {\n        await App.xmppService.xmpp.send(xml('presence', { type: 'available' }, xml('show', {}, 'chat'))).catch(console.error)\n    }\n\n    async setOffline() {\n        await App.xmppService.xmpp.send(xml('presence', { type: 'unavailable' })).catch(console.error)\n    }\n\n    async getContactList() {\n        await App.xmppService.xmpp.send(\n            xml('iq', {\n                type: 'get',\n                id: 'roster_1'\n            },\n                xml(\n                    'query', { xmlns: 'jabber:iq:roster' }, ''\n                )\n            )\n        )\n    }\n\n    async subscribeRequest(jid: string) {\n        await App.xmppService.xmpp.send(xml('presence', { type: 'subscribe', to: jid }))\n        this.getContactList()\n    }\n\n    setSelectedUser(user: User) {\n        this.setState({ selectedUser: user });\n    }\n\n    xmppConnect() {\n        App.xmppService = new XmppService(this.state.xmppUsername, this.state.xmppPassword, 'test')\n        App.xmppService.initConnection();\n\n        App.xmppService.xmpp.on('error', (err: any) => {\n            console.error(err)\n        });\n\n        App.xmppService.xmpp.on('stanza', (stanza: any) => {\n            if (stanza.is('iq')) {\n                console.log(stanza)\n                if (stanza.attrs.type === 'result' && stanza.children && stanza.children[0] && stanza.children[0].children[0] && stanza.children[0].children[0].name === 'jid') {\n                    // Retrieve the user's id\n                    this.setState({ userId: stanza.attrs.id })\n                } else if (stanza.attrs.id === 'roster_1') {\n                    // Retrieve the friendList\n                    let newFriendlist: User[] = stanza.children[0].children.map((element: any) => {\n                        if (element.name === 'item') {\n                            let jid = element.attrs.jid;\n                            let subscriptionStatus;\n                            if (element.attrs.subscription) {\n                                subscriptionStatus = element.attrs.subscription;\n                            } else if (element.attrs.ask) {\n                                subscriptionStatus = 'Subscribe request sent';\n                            }\n                            return new User(jid, '', subscriptionStatus);\n                        }\n                        return null\n                    })\n                    this.setState({ friendList: newFriendlist });\n                } else if (stanza.attrs.id === 'roster_4') {\n                    this.getContactList();\n                }\n            }\n\n            if (stanza.is('presence')) {\n                if (stanza.attrs.to === stanza.attrs.from) {\n                    // Update the presence of the current user\n                    let presenceEvent = stanza.children.filter((element: any) => {\n                        return element.name === 'show';\n                    });\n                    this.setState({ presence: presenceEvent[0].children })\n                }\n\n            }\n\n            if (stanza.is('message')) {\n                console.log(stanza)\n                this.setState(() => {\n                    let newMessages: Message[] = this.state.messages;\n\n                    let body = stanza.children.filter((element: any) => {\n                        return element.name === 'body';\n                    })[0];\n\n                    newMessages.push(new Message(stanza.attrs.id, body.children[0], stanza.attrs.from, stanza.attrs.to));\n                    return newMessages;\n                }\n                )\n            }\n        });\n\n        App.xmppService.xmpp.on('online', (address: { toString: () => any; }) => {\n            this.setState({ connectionStatus: 'Connected as ' + address });\n            this.getContactList()\n        });\n\n        App.xmppService.xmpp.on('offline', () => {\n            this.setState({ connectionStatus: 'Disconnected' })\n        });\n\n        App.xmppService.connect()\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}